For deploying to ACloudGuru sandbox

type az login on your CLI to login - it will open a website for you to login for azure.

Admin Account Copy/Paste values
admin login: myadmin
Badminpassword123!

Examples of names used for creating ACR,AKS
$appname="1-4b8700da-playground-sandbox"    registry name:4b8700daregistry
											kub name:4b8700dacluster

**Commands for creating ACR, AKS, Secret Key Vault(Vault isn't used in current example,left in for just incase for future deployments)
az acr create --name 4b8700daregistry --resource-group $appname --sku Basic
az aks create -n 4b8700dacluster -g $appname --node-vm-size Standard_B2s --node-count 3  --generate-ssh-keys --network-plugin azure
az keyvault create -n 4b8700dakeyvault -g $appname
az aks get-credentials --name 4b8700dacluster --resource-group 1-4b8700da-playground-sandbox

**Example postgres database creation command not working currently. It doesn't allow database trigger creation.
az postgres flexible-server create --name 4b8700dapg --resource-group $appname --location eastus --admin-user myadmin --admin-password Badminpassword123! --sku-name Standard_B1ms --tier Burstable
**Use below command if you have azure cli add-on for connection to db's or create a contactmanager db through the UI.
az postgres flexible-server connect --admin-user myadmin --name 4b8700dapg --admin-password Badminpassword123!

**Database Connection String Example for a Postgres DB, switch your connection strings to these.
Server=4b8700dapg.postgres.database.azure.com;Database=contactmanager;Port=5432;User Id=myadmin;Password=Badminpassword123!;

**Logging into our ACR to push our docker image from our local computer.
**Before doing this turn on admin connection to ACR through UI. Enable admin account and copy paste their details to docker secret for pulling image.
az acr login --name 4b8700daregistry
docker tag cmcleanapi 4b8700daregistry.azurecr.io/cmcleanapi:latest
docker push 4b8700daregistry.azurecr.io/cmcleanapi:latest

**Creating a kubernetes secret so our images can be pulled from registry when we can't attach a ACR to our AKS. Active the admin user in ACR to get these credentials through UI.
kubectl create secret docker-registry mydockersecret --docker-server=4b8700daregistry.azurecr.io --docker-username=4b8700daregistry --docker-password=59FZHpRrKwOmJ5XtO8uxk1KWsFo5TDBCmgR3dEWKVT+ACRCA4QeU --docker-email=4b8700da@test.com
**Our kubernetes yml file with cluster definition and load balancer adding script so It can be accessed from outside.
kubectl create -f azure-deploy.yml
**If you want to make changes to your deployment
kubectl apply -f azure-deploy.yml
**After all these just use your public address you see from load balancer for your API.

---Kubernetes deployment example
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cmcleanapi-deployment
spec:
  selector:
    matchLabels:
      app: cmcleanapi
  template:
    metadata:
      labels:
        app: cmcleanapi
    spec:
      containers:
      - name: cmcleanapi
        image: 4b8700daregistry.azurecr.io/cmcleanapi:102
        resources:
          limits:
            memory: "256Mi"
            cpu: "150m"
        ports:
        - containerPort: 5218
      imagePullSecrets:
        - name: mydockersecret
---
apiVersion: v1
kind: Service
metadata:
  name: cmcleanapi-service
spec:
  type: LoadBalancer
  selector:
    app: cmcleanapi
  ports:
  - port: 80
    targetPort: 5218